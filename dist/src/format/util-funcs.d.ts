export declare const getTimezoneOffset = "\n    function getTimezoneOffset(date) {\n        const offset = date.getTimezoneOffset();\n        const sign = offset < 0 ? '+' : '-';\n        const hours = `0${Math.abs(Math.floor(offset / 60))}`.slice(-2);\n        const minutes = `0${offset % 60}`.slice(-2);\n\n        return `${sign}${hours}${minutes}`;\n    }\n";
export declare const getDayOfYear = "\n    function getDayOfYear(year, month, date) {\n        const passedDayLookup = [\n            [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n            [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]\n        ];\n        const offset = Number(year % 4 == 0 && (year % 100 !== 0 || year % 400 === 0));\n\n        return passedDayLookup[offset][month] + date;\n    }\n";
export declare const getDayOfWeek = "\n    // 0 - Sunday ... 6 - Saturday\n    function getDayOfWeek(year, month, date) {\n        const lookupMap = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];\n        const y = month < 2 ? year - 1 : year;\n        const day = (y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) + lookupMap[month] + date) % 7;\n\n        return day;\n    }\n";
export declare const getISODayOfWeek = "\n    // 1 - Monday ... 7 - Sunday\n    function getISODayOfWeek(year, month, date) {\n        const lookupMap = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];\n        const y = month < 2 ? year - 1 : year;\n        const day = (y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) + lookupMap[month] + date) % 7;\n\n        return day || 7;\n    }\n";
export declare const getMondayWeek = "\n    function getMondayWeek(year, month, date) {\n        const weekDay = getISODayOfWeek(year, month, date);\n\n        return Math.floor((10 + getDayOfYear(year, month, date) - weekDay) / 7);\n    }\n";
export declare const getSundayWeek = "\n    function getSundayWeek(year, month, date) {\n        return Math.floor((10 + getDayOfYear(year, month, date) - getDayOfWeek(year, month, date)) / 7);\n    }\n";
export declare const getISOWeek = "\n    // http://www.proesite.com/timex/wkcalc.htm\n    function getISOWeek(year, month, date) {\n        let y = year;\n        let m = month;\n        let d = date;\n        let thisYearDow0101 = getISODayOfWeek(y, 0, 1) - 1;\n        let nextYearDow0101 = getISODayOfWeek(y + 1, 0, 1) - 1;\n        let dow = getISODayOfWeek(y, m, d) - 1;\n        let dow0101 = thisYearDow0101;\n\n        if (m === 0 && dow0101 > 3 && dow0101 < 7 - (d - 1)) {\n            // days before week 1 of the current year have the same week number as\n            // the last day of the last week of the previous year\n\n            dow = dow0101 - 1;\n            dow0101 = getISODayOfWeek(y - 1, 0, 1) - 1;\n            m = 11;\n            d = 31;\n        }\n        else if (month === 11 && nextYearDow0101 > 30 - (d - 1)  && nextYearDow0101 < 4) {\n            // days after the last week of the current year have the same week number as\n            // the first day of the next year, (i.e. 1)\n\n            return 1;\n        }\n\n        if (thisYearDow0101 < 4) {\n            return Math.floor(1 + (4 * m) + (2 * m + (d - 1) + dow0101 - dow + 6) * 36 / 256);\n        }\n\n        return Math.floor(4 * m + (2 * m + (d - 1) + dow0101 - dow + 6) * 36 / 256);\n    }\n";
